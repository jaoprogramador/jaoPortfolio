<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Ejercicios Oracle</title>
<META http-equiv=Content-Language content=es>
<META content="Programación,Programas,Aplicaciones,Ejercicios, Ejemplos,Tutoriales,Manuales" name=description>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="keywords" content="cursores, Oracle, sql, pl/sql, programacion oracle, ejercicios, ejemplos">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../styles/estilos.css" rel="stylesheet" type="text/css">
</head>

<body>
<table width="555" height="267" align="left" background="../imagenes/fondologo.jpg">
  <tr> 
    <td height="52" colspan="3"> <h2>E 
        J E R C I C I O S</h2></td>
  </tr>
  <tr> 
    <td><h3>CURSOR...IS...</h3><p>
        1.- Ejemplos de creaci&oacute;n de procedimientos con cursores.</p>
      <p>1) Desarrollar un procedimiento que visualice el apellido y la fecha de alta de todos los empleados ordenados por apellido.<br>
      </p>
      <p>CREATE OR REPLACE PROCEDURE ver_emple<br>
        AS<br>
  CURSOR c_emple IS <br>
  SELECT APELLIDO, FECHA_ALT<br>
  FROM EMPLE<br>
  ORDER BY APELLIDO;<br>
  v_apellido VARCHAR2(10);<br>
  v_fecha DATE;<br>
  BEGIN<br>
  OPEN c_emple;<br>
  FETCH c_emple into v_apellido, v_fecha;<br>
  WHILE c_emple%FOUND LOOP<br>
  DBMS_OUTPUT.PUT_LINE( v_apellido||' * '||v_fecha);<br>
  FETCH c_emple into v_apellido,v_fecha; <br>
  END LOOP;<br>
  CLOSE c_emple;<br>
  END ver_emple;<br>
      </p>
      <p>2) Codificar un procedimiento que muestre el nombre de cada departamento y el n&uacute;mero de empleados que tiene.<br>
          <br>
          CREATE OR REPLACE PROCEDURE ver_emple_depart<br>
          AS<br>
  CURSOR c_emple IS <br>
  SELECT dnombre, COUNT(emp_no)<br>
  FROM emple e, depart d<br>
  WHERE d.dept_no = e.dept_no(+)<br>
  GROUP BY dnombre;<br>
  v_dnombre depart.dnombre%TYPE;<br>
  v_num_emple BINARY_INTEGER;<br>
  BEGIN<br>
  OPEN c_emple;<br>
  FETCH c_emple into v_dnombre, v_num_emple;<br>
  WHILE c_emple%FOUND LOOP<br>
  DBMS_OUTPUT.PUT_LINE(v_dnombre||' * '||v_num_emple);<br>
  FETCH c_emple into v_dnombre,v_num_emple;<br>
  END LOOP;<br>
  CLOSE c_emple;<br>
  END ver_emple_depart;<br>
      </p>
      <p>3) Escribir un procedimiento que reciba una cadena y visualice el apellido y el n&uacute;mero de empleado de todos los empleados cuyo apellido contenga la cadena especificada. Al finalizar visualizar el n&uacute;mero de empleados mostrados.</p>
      <p>CREATE OR REPLACE PROCEDURE ver_emple_apell(<br>
  cadena VARCHAR2)<br>
  AS<br>
  cad VARCHAR2(10);<br>
  CURSOR c_emple IS <br>
  SELECT apellido, emp_no FROM emple<br>
  WHERE apellido LIKE cad;<br>
  vr_emple c_emple%ROWTYPE;<br>
  BEGIN<br>
  cad :='%'||cadena||'%';<br>
  OPEN c_emple;<br>
  FETCH c_emple INTO vr_emple;<br>
  WHILE (c_emple%FOUND) LOOP<br>
  DBMS_OUTPUT.PUT_LINE(vr_emple.emp_no||' * '<br>
  ||vr_emple.apellido);<br>
  FETCH c_emple INTO vr_emple; <br>
  END LOOP;<br>
  DBMS_OUTPUT.PUT_LINE('NUMERO DE EMPLEADOS: '<br>
  || c_emple%ROWCOUNT);<br>
  CLOSE c_emple;<br>
  END ver_emple_apell;</p>
      <p>4) Escribir un programa que visualice el apellido y el salario de los cinco empleados que tienen el salario m&aacute;s alto.</p>
      <p>CREATE OR REPLACE PROCEDURE emp_5maxsal<br>
        AS<br>
  CURSOR c_emp IS<br>
  SELECT apellido, salario FROM emple<br>
  ORDER BY salario DESC;<br>
  vr_emp c_emp%ROWTYPE;<br>
  i NUMBER;<br>
  BEGIN<br>
  i:=1;<br>
  OPEN c_emp;<br>
  FETCH c_emp INTO vr_emp;<br>
  WHILE c_emp%FOUND AND i&lt;=5 LOOP <br>
  DBMS_OUTPUT.PUT_LINE(vr_emp.apellido ||<br>
  ' * '|| vr_emp.salario); <br>
  FETCH c_emp INTO vr_emp;<br>
  i:=I+1;<br>
  END LOOP;<br>
  CLOSE c_emp;<br>
  END emp_5maxsal;<br>
      </p>
      <p></p></td>
    <td>&nbsp;</td>
    <td><a href="http://es.geocities.com/juantxu28/oraclezip/Ejer38.rar"><img src="../imagenes/Descarga.gif" width="16" height="16" border="0"></a></td>
  </tr>
  <tr> 
    <td><h3>OPEN...FETCH...</h3><p>
      2 .- Ejemplos de como como recorrer un cursor.</p>
      <p>5) Codificar un programa que visualice los dos empleados que ganan menos de cada oficio.<br>
        CREATE OR REPLACE PROCEDURE emp_2minsal<br>
        AS<br>
CURSOR c_emp IS<br>
SELECT apellido, oficio, salario FROM emple<br>
ORDER BY oficio, salario;<br>
vr_emp c_emp%ROWTYPE;<br>
oficio_ant EMPLE.OFICIO%TYPE;<br>
i NUMBER;<br>
BEGIN<br>
OPEN c_emp;<br>
oficio_ant:='*';<br>
FETCH c_emp INTO vr_emp;<br>
WHILE c_emp%FOUND LOOP <br>
IF oficio_ant &lt;&gt; vr_emp.oficio THEN<br>
oficio_ant := vr_emp.oficio;<br>
i := 1;<br>
END IF;<br>
IF i &lt;= 2 THEN<br>
DBMS_OUTPUT.PUT_LINE(vr_emp.oficio||' * '<br>
||vr_emp.apellido||' * '<br>
||vr_emp.salario); <br>
END IF;<br>
FETCH c_emp INTO vr_emp;<br>
i:=I+1;<br>
END LOOP;<br>
CLOSE c_emp;<br>
END emp_2minsal;</p>
      <p>&nbsp;</p>
      <p>6) Escribir un programa que muestre, en formato similar a las rupturas de control o secuencia vistas en SQL*plus los siguientes datos:<br>
        - Para cada empleado: apellido y salario.<br>
        - Para cada departamento: N&uacute;mero de empleados y suma de los salarios del departamento.<br>
        - Al final del listado: N&uacute;mero total de empleados y suma de todos los salarios.<br>
        CREATE OR REPLACE PROCEDURE listar_emple<br>
        AS<br>
  CURSOR c1 IS<br>
  SELECT apellido, salario, dept_no FROM emple<br>
  ORDER BY dept_no, apellido;<br>
  vr_emp c1%ROWTYPE;<br>
  dep_ant EMPLE.DEPT_NO%TYPE;<br>
  cont_emple NUMBER(4) DEFAULT 0;<br>
  sum_sal NUMBER(9) DEFAULT 0;<br>
  tot_emple NUMBER(4) DEFAULT 0;<br>
  tot_sal NUMBER(10) DEFAULT 0;<br>
  BEGIN<br>
  OPEN c1;<br>
  FETCH c1 INTO vr_emp;<br>
  IF c1%FOUND THEN<br>
  dep_ant := vr_emp.dept_no;<br>
  END IF;<br>
  WHILE c1%FOUND LOOP</p>
      <p> /* Comprobaci&oacute;n nuevo departamento y resumen */<br>
        IF dep_ant &lt;&gt; vr_emp.dept_no THEN <br>
  DBMS_OUTPUT.PUT_LINE('*** DEPTO: ' || dep_ant ||<br>
  ' NUM. EMPLEADOS: '||cont_emple ||<br>
  ' SUM. SALARIOS: '||sum_sal);<br>
  dep_ant := vr_emp.dept_no;<br>
  tot_emple := tot_emple + cont_emple;<br>
  tot_sal:= tot_sal + sum_sal;<br>
  cont_emple:=0;<br>
  sum_sal:=0; <br>
  END IF;</p>
      <p>/* L&iacute;neas de detalle */<br>
  DBMS_OUTPUT.PUT_LINE(RPAD(vr_emp.apellido,10)|| ' * '<br>
  ||LPAD(TO_CHAR(vr_emp.salario,'9,999,999'),12));<br>
  <br>
  /* Incrementar y acumular */<br>
  cont_emple := cont_emple + 1;<br>
  sum_sal:=sum_sal + vr_emp.salario; </p>
      <p> FETCH c1 INTO vr_emp;<br>
  END LOOP;<br>
  CLOSE c1;</p>
      <p>IF cont_emple &gt; 0 THEN</p>
      <p> /* Escribir datos del &uacute;ltimo departamento */<br>
  DBMS_OUTPUT.PUT_LINE('*** DEPTO: ' || dep_ant ||<br>
  ' NUM EMPLEADOS: '|| cont_emple ||<br>
  ' SUM. SALARIOS: '||sum_sal);<br>
  dep_ant := vr_emp.dept_no;<br>
  tot_emple := tot_emple + cont_emple;<br>
  tot_sal:= tot_sal + sum_sal;<br>
  cont_emple:=0;<br>
  sum_sal:=0; </p>
      <p> /* Escribir totales informe */<br>
  DBMS_OUTPUT.PUT_LINE(' ****** NUMERO TOTAL EMPLEADOS: '<br>
  ||tot_emple ||<br>
  ' TOTAL SALARIOS: '|| tot_sal);<br>
  END IF;<br>
  END listar_emple;</p>
      <p>/* Nota: este procedimiento puede escribirse de forma que la visualizaci&oacute;n de los resultados resulte mas clara incluyendo l&iacute;neas de separaci&oacute;n, cabeceras de columnas, etc&eacute;tera. Por razones did&aacute;cticas no se han incluido estos elementos ya que pueden distraer y dificultar la comprensi&oacute;n del c&oacute;digo. */<br>
      </p>
      <p>7) Desarrollar un procedimiento que permita insertar nuevos departamentos seg&uacute;n las siguientes especificaciones:<br>
        Se pasar&aacute; al procedimiento el nombre del departamento y la localidad.<br>
  El procedimiento insertar&aacute; la fila nueva asignando como n&uacute;mero de departamento la decena siguiente al n&uacute;mero mayor de la tabla. <br>
  Se incluir&aacute; gesti&oacute;n de posibles errores.</p>
      <p>CREATE OR REPLACE PROCEDURE insertar_depart(<br>
  nombre_dep VARCHAR2,<br>
  loc VARCHAR2)<br>
  AS<br>
  CURSOR c_dep IS SELECT dnombre <br>
  FROM depart WHERE dnombre = nombre_dep; <br>
  v_dummy DEPART.DNOMBRE%TYPE DEFAULT NULL;<br>
  v_ulti_num DEPART.DEPT_NO%TYPE;<br>
  nombre_duplicado EXCEPTION;<br>
  BEGIN<br>
  /* Comprobaci&oacute;n de que el departamento no est&aacute; duplicado */<br>
  OPEN c_dep;<br>
  FETCH c_dep INTO v_dummy; <br>
  CLOSE c_dep;<br>
  IF v_dummy IS NOT NULL THEN<br>
  RAISE nombre_duplicado;<br>
  END IF;</p>
      <p> /* Captura del &uacute;ltimo n&uacute;mero y c&aacute;lculo del siguiente */<br>
  SELECT MAX(dept_no) INTO v_ulti_num FROM depart;<br>
  <br>
  /* Inserci&oacute;n de la nueva fila */<br>
  INSERT INTO depart VALUES ((TRUNC(v_ulti_num, -1)+10)<br>
  , nombre_dep, loc);<br>
  EXCEPTION<br>
  WHEN nombre_duplicado THEN <br>
  DBMS_OUTPUT.PUT_LINE('Err. departamento duplicado');<br>
  RAISE;<br>
  WHEN OTHERS THEN<br>
  RAISE_APPLICATION_ERROR(-20005,<br>
  'Err. Operaci&oacute;n cancelada&rsquo;);<br>
  END insertar_depart; </p>
      <p>&nbsp;</p>
      <p> 8) Escribir un procedimiento que reciba todos los datos de un nuevo empleado procese la transacci&oacute;n de alta, gestionando posibles errores.</p>
      <p>CREATE OR REPLACE PROCEDURE alta_emp(<br>
  num emple.emp_no%TYPE,<br>
  ape emple.apellido%TYPE,<br>
  ofi emple.oficio%TYPE,<br>
  jef emple.dir%TYPE,<br>
  fec emple.fecha_alt%TYPE,<br>
  sal emple.salario%TYPE,<br>
  com emple.comision%TYPE DEFAULT NULL,<br>
  dep emple.dept_no%TYPE)<br>
  AS<br>
  v_dummy_jef EMPLE.DIR%TYPE DEFAULT NULL;<br>
  v_dummy_dep DEPART.DEPT_NO%TYPE DEFAULT NULL;<br>
  BEGIN<br>
  /* Comprobaci&oacute;n de que existe el departamento */<br>
  SELECT dept_no INTO v_dummy_dep <br>
  FROM depart WHERE dept_no = dep;</p>
      <p> /* Comprobaci&oacute;n de que existe el jefe del empleado */<br>
  SELECT emp_no INTO v_dummy_jef <br>
  FROM emple WHERE emp_no = jef;</p>
      <p> /* Inserci&oacute;n de la fila */ <br>
        INSERT INTO EMPLE VALUES <br>
        (num, ape, ofi, jef, fec, sal, com, dep);</p>
      <p>EXCEPTION<br>
  WHEN NO_DATA_FOUND THEN<br>
  IF v_dummy_dep IS NULL THEN<br>
  RAISE_APPLICATION_ERROR(-20005, <br>
  'Err. Departamento inexistente');<br>
  ELSIF v_dummy_jef IS NULL THEN<br>
  RAISE_APPLICATION_ERROR(-20005, <br>
  'Err. No existe el jefe');<br>
  ELSE <br>
  RAISE_APPLICATION_ERROR(-20005, <br>
  'Err. Datos no encontrados(*)');<br>
  END IF;<br>
  WHEN DUP_VAL_ON_INDEX THEN<br>
  DBMS_OUTPUT.PUT_LINE<br>
  ('Err.numero de empleado duplicado');<br>
  RAISE;<br>
  END alta_emp;<br>
      </p>
      <p></p></td>
    <td>&nbsp;</td>
    <td><a href="http://es.geocities.com/juantxu28/oraclezip/Ejer39.rar"><img src="../imagenes/Descarga.gif" width="16" height="16" border="0"></a></td>
  </tr>
  <tr> 
    <td><h3>WHILE...FOUND...LOOP...</h3><p>
      3 .- Ejemplos como procedimientos con cursores 
      y par&aacute;metros de entrada.</p>
      <p>9) Codificar un procedimiento reciba como par&aacute;metros un numero de departamento, un importe y un porcentaje; y suba el salario a todos los empleados del departamento indicado en la llamada. La subida ser&aacute; el porcentaje o el importe indicado en la llamada (el que sea m&aacute;s beneficioso para el empleado en cada caso empleado).</p>
      <p>CREATE OR REPLACE PROCEDURE subida_sal1(<br>
  num_depar emple.dept_no%TYPE,<br>
  importe NUMBER,<br>
  porcentaje NUMBER)<br>
  AS<br>
  CURSOR c_sal IS SELECT salario,ROWID<br>
  FROM emple WHERE dept_no = num_depar;<br>
  vr_sal c_sal%ROWTYPE;<br>
  v_imp_pct NUMBER(10);<br>
  BEGIN<br>
  OPEN c_sal;<br>
  FETCH c_sal INTO vr_sal;<br>
  WHILE c_sal%FOUND LOOP</p>
      <p>/* Guardar en v_imp_pct el importe mayor */<br>
        v_imp_pct := <br>
  GREATEST((vr_sal.salario/100)*porcentaje,<br>
  v_imp_pct); </p>
      <p>/* Actualizar */<br>
        UPDATE EMPLE SET SALARIO=SALARIO + v_imp_pct<br>
  WHERE ROWID = vr_sal.rowid;<br>
  <br>
  FETCH c_sal INTO vr_sal; <br>
  END LOOP;<br>
  CLOSE c_sal;<br>
  EXCEPTION<br>
  WHEN NO_DATA_FOUND THEN<br>
  DBMS_OUTPUT.PUT_LINE('Err. ninguna fila actualizada');<br>
  END subida_sal1;</p>
      <p>&nbsp;</p>
      <p>10) Escribir un procedimiento que suba el sueldo de todos los empleados que ganen menos que el salario medio de su oficio. La subida ser&aacute; de el 50% de la diferencia entre el salario del empleado y la media de su oficio. Se deber&aacute; asegurar que la transacci&oacute;n no se quede a medias, y se gestionar&aacute;n los posibles errores. <br>
        CREATE OR REPLACE PROCEDURE subida_50pct<br>
        AS<br>
  CURSOR c_ofi_sal IS<br>
  SELECT oficio, AVG(salario) salario FROM emple<br>
  GROUP BY oficio;<br>
  CURSOR c_emp_sal IS<br>
  SELECT oficio, salario FROM emple E1<br>
  WHERE salario &lt; <br>
  (SELECT AVG(salario) FROM emple E2<br>
  WHERE E2.oficio = E1.oficio)<br>
  ORDER BY oficio, salario FOR UPDATE OF salario;<br>
  <br>
  vr_ofi_sal c_ofi_sal%ROWTYPE;<br>
  vr_emp_sal c_emp_sal%ROWTYPE; <br>
  v_incremento emple.salario%TYPE;<br>
  <br>
  BEGIN<br>
  COMMIT;<br>
  OPEN c_emp_sal;<br>
  FETCH c_emp_sal INTO vr_emp_sal;<br>
  OPEN c_ofi_sal;<br>
  FETCH c_ofi_sal INTO vr_ofi_sal;<br>
  WHILE c_ofi_sal%FOUND AND c_emp_sal%FOUND LOOP </p>
      <p> /* calcular incremento */<br>
        v_incremento :=<br>
  (vr_ofi_sal.salario - vr_emp_sal.salario) / 2;</p>
      <p> /* actualizar */ <br>
        UPDATE emple SET salario = salario + v_incremento<br>
  WHERE CURRENT OF c_emp_sal; </p>
      <p> /* siguiente empleado */ <br>
        FETCH c_emp_sal INTO vr_emp_sal;</p>
      <p>/* comprobar si es otro oficio */<br>
        IF c_ofi_sal%FOUND and <br>
  vr_ofi_sal.oficio &lt;&gt; vr_emp_sal.oficio THEN<br>
  FETCH c_ofi_sal INTO vr_ofi_sal;<br>
  END IF;<br>
  END LOOP; <br>
  CLOSE c_emp_sal;<br>
  CLOSE c_ofi_sal;<br>
  COMMIT;<br>
  EXCEPTION<br>
  WHEN OTHERS THEN<br>
  ROLLBACK WORK;<br>
  RAISE;<br>
  END subida_50pct;</p>
      <p>&nbsp;</p>
      <p>11) Dise&ntilde;ar una aplicaci&oacute;n que simule un listado de liquidaci&oacute;n de los empleados seg&uacute;n las siguientes especificaciones:</p>
      <p>- El listado tendr&aacute; el siguiente formato para cada empleado:<br>
        **********************************************************************<br>
        Liquidaci&oacute;n del empleado:...................(1) Dpto:.................(2) Oficio:...........(3)</p>
      <p>Salario : ............(4)<br>
        Trienios :.............(5)<br>
        Comp. Responsabil :.............(6)<br>
        Comisi&oacute;n :.............(7)<br>
  ------------<br>
  Total :.............(8)<br>
  **********************************************************************<br>
  - Donde:<br>
  1 ,2, 3 y 4 Corresponden al apellido, departamento, oficio y salario del empleado.<br>
  5 Es el importe en concepto de trienios. Cada trienio son tres a&ntilde;os completos desde la fecha de alta hasta la de emisi&oacute;n y supone 5000 Ptas. <br>
  6 Es el complemento por responsabilidad. Ser&aacute; de 10000Ptas por cada empleado que se encuentre directamente a cargo del empleado en cuesti&oacute;n.<br>
  7 Es la comisi&oacute;n. Los valores nulos ser&aacute;n sustituidos por ceros.<br>
  8 Suma de todos los conceptos anteriores.<br>
&ndash; El listado ir&aacute; ordenado por Apellido. <br>
  CREATE OR REPLACE PROCEDURE liquidar<br>
  AS<br>
  CURSOR c_emp IS<br>
  SELECT apellido, emp_no, oficio, salario,<br>
  NVL(comision,0) comision, dept_no, fecha_alt<br>
  FROM emple<br>
  ORDER BY apellido;<br>
  vr_emp c_emp%ROWTYPE;<br>
  v_trien NUMBER(9) DEFAULT 0;<br>
  v_comp_r NUMBER(9);<br>
  v_total NUMBER(10);<br>
  BEGIN<br>
  FOR vr_emp in c_emp LOOP</p>
      <p> /* Calcular trienios. Llama a la funci&oacute;n trienios<br>
  creada en el ejercicio 11.8 */ <br>
  v_trien := trienios(vr_emp.fecha_alt,SYSDATE)*5000;<br>
  <br>
  /* Calcular complemento de responsabilidad. Se<br>
  encierra en un bloque pues levantar&aacute; NO_DATA_FOUND*/<br>
  BEGIN<br>
  SELECT COUNT(*) INTO v_comp_r <br>
  FROM EMPLE WHERE DIR = vr_emp.emp_no;<br>
  v_comp_r := v_comp_r *10000;<br>
  EXCEPTION<br>
  WHEN NO_DATA_FOUND THEN<br>
  v_comp_r:=0;<br>
  END; </p>
      <p>/* Calcular el total del empleado */<br>
        v_total := vr_emp.salario + vr_emp. comision +<br>
        v_trien + v_comp_r;</p>
      <p> /* Visualizar datos del empleado */<br>
        DBMS_OUTPUT.PUT_LINE('*************************************');<br>
        DBMS_OUTPUT.PUT_LINE(' Liquidacion de : '|| vr_emp.apellido <br>
        ||' Dpto: ' || vr_emp.dept_no <br>
        || ' Oficio: ' || vr_emp.oficio);<br>
        DBMS_OUTPUT.PUT_LINE(RPAD('Salario:',16)<br>
        ||LPAD(TO_CHAR(vr_emp.salario,'9,999,999'),12));<br>
        DBMS_OUTPUT.PUT_LINE(RPAD('Trienios: ',16) <br>
        || LPAD(TO_CHAR(v_trien,'9,999,999'),12));<br>
        DBMS_OUTPUT.PUT_LINE('Comp. Respons: ' <br>
        ||LPAD(TO_CHAR(v_comp_r,'9,999,999'),12));<br>
        DBMS_OUTPUT.PUT_LINE(RPAD('Comision: ' ,16) <br>
        ||LPAD(TO_CHAR(vr_emp.comision,'9,999,999'),12));<br>
        DBMS_OUTPUT.PUT_LINE('------------------');<br>
        DBMS_OUTPUT.PUT_LINE(RPAD(' Total : ',16)<br>
        ||LPAD(TO_CHAR(v_total,'9,999,999') ,12));<br>
        DBMS_OUTPUT.PUT_LINE('**************************************');<br>
  END LOOP;<br>
  EXCEPTION<br>
  WHEN NO_DATA_FOUND THEN<br>
  DBMS_OUTPUT.PUT_LINE('No se ha encontrado ninguna fila');<br>
  END liquidar;<br>
      </p>
      <p>/* Nota: Tambi&eacute;n se puede utilizar una cl&aacute;usula SELECT m&aacute;s compleja:<br>
        CURSOR c_emp IS<br>
  SELECT APELLIDO, EMP_NO, OFICIO, <br>
  (EMP_CARGO * 10000) COM_RESPONSABILIDAD,<br>
  SALARIO, NVL(COMISION, 0) COMISION, DEPT_NO, <br>
  TRIENIOS(FECHA_ALT, SYSDATE) * 5000 TOT_TRIENIOS<br>
  FROM EMPLE,(SELECT DIR,COUNT(*) EMP_CARGO FROM EMPLE<br>
  GROUP BY DIR) DIREC<br>
  WHERE EMPLE.EMP_NO = DIREC.DIR(+) <br>
  ORDER BY APELLIDO;<br>
  de esta forma se simplifica el programa y se evita la utilizaci&oacute;n de variables de trabajo. */</p>
      <p>&nbsp;</p>
      <p>12) Crear la tabla T_liquidacion con las columnas apellido, departamento, oficio, salario, trienios, comp_responsabilidad, comisi&oacute;n y total; y modificar la aplicaci&oacute;n anterior para que en lugar de realizar el listado directamente en pantalla, guarde los datos en la tabla. Se controlar&aacute;n todas las posibles incidencias que puedan ocurrir durante el proceso.</p>
      <p>CREATE TABLE t_liquidacion (<br>
  APELLIDO VARCHAR2(10),<br>
  DEPARTAMENTO NUMBER(2),<br>
  OFICIO VARCHAR2(10),<br>
  SALARIO NUMBER(10),<br>
  TRIENIOS NUMBER(10),<br>
  COMP_RESPONSABILIDAD NUMBER(10),<br>
  COMISION NUMBER(10),<br>
  TOTAL NUMBER(10)<br>
  ); </p>
      <p>CREATE OR REPLACE PROCEDURE liquidar2<br>
        AS<br>
  CURSOR c_emp IS<br>
  SELECT apellido, emp_no, oficio, salario,<br>
  NVL(comision,0) comision, dept_no, fecha_alt<br>
  FROM emple<br>
  ORDER BY apellido;<br>
  vr_emp c_emp%ROWTYPE;<br>
  v_trien NUMBER(9) DEFAULT 0;<br>
  v_comp_r NUMBER(9);<br>
  v_total NUMBER(10);<br>
  BEGIN<br>
  COMMIT WORK;<br>
  FOR vr_emp in c_emp LOOP</p>
      <p> /* Calcular trienios. Llama a la funci&oacute;n trienios<br>
  creada en el ejercicio 11.8 */ <br>
  v_trien := trienios(vr_emp.fecha_alt,SYSDATE)*5000;<br>
  <br>
  /* Calcular complemento de responsabilidad. Se<br>
  encierra en un bloque pues levantar&aacute; NO_DATA_FOUND*/<br>
  BEGIN<br>
  SELECT COUNT(*) INTO v_comp_r <br>
  FROM EMPLE WHERE DIR = vr_emp.emp_no;<br>
  v_comp_r := v_comp_r *10000;<br>
  EXCEPTION<br>
  WHEN NO_DATA_FOUND THEN<br>
  v_comp_r:=0;<br>
  END; </p>
      <p>/* Calcular el total del empleado */<br>
        v_total := vr_emp.salario + vr_emp. comision +<br>
        v_trien + v_comp_r;</p>
      <p> /* Insertar los datos en la tabla T_liquidacion */<br>
  INSERT INTO t_liquidacion <br>
  (APELLIDO, OFICIO, SALARIO, TRIENIOS,<br>
  COMP_RESPONSABILIDAD, COMISION, TOTAL) <br>
  VALUES<br>
  (vr_emp.apellido, vr_emp.oficio, vr_emp.salario,<br>
  v_trien, v_comp_r, vr_emp.comision, v_total);<br>
  END LOOP;<br>
  EXCEPTION<br>
  WHEN OTHERS THEN<br>
  ROLLBACK WORK;<br>
  END liquidar2;<br>
      </p></td>
    <td>&nbsp;</td>
    <td><a href="http://es.geocities.com/juantxu28/oraclezip/Ejer40.rar"><img src="../imagenes/Descarga.gif" width="16" height="16" border="0"></a></td>
  </tr>
  <tr> 
    <td>
<div align="right">
        <a href="http://es.geocities.com/juantxu28/index3.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div>
      </td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
