<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Sintaxis XML</title>
<META http-equiv=Content-Language content=es>
<META content="Programación en CSS,Programas CSS,Aplicaciones en CSS,Ejercicios en CSS, Ejemplos de CSS,Tutoriales de CSS,Manuales CSS" name=description>
<meta name="keywords" content="CSS, Manual CSS, tutorial CSS, Ejemplos CSS, ejercicios CSS, Cascading Style Sheet">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../styles/estilos.css" rel="stylesheet" type="text/css">
</head>

<body>
<table width="555" height="329" align="left" background="../imagenes/fondologo.jpg">
  <tr> 
    <td height="39" colspan="3"> <h2> <strong>Sintaxis XML </strong> </h2></td>
  </tr>
  <tr> 
    <td height="258" colspan="3"> 
      <p>&nbsp; </p>
      <p>&#149;&nbsp; Inicio del documento XML </p>
      <p>&lt;?xml version=”1.0”encoding=”UTF-8”standalone=”yes”?&gt; </p>
      <p>Lo primero que tenemos que tener en cuenta es la primera l&iacute;nea. Con ella deben empezar todos los documentos XML, ya que es la que indica que lo que sigue es XML. Aunque es opcional , es mas que recomendable a&ntilde;adirla siempre. Puede tener varios atributos(los campos que van dentro de la declaraci&oacute;n ), algunos obligatorios y otros son : </p>
      <p>&#149;&nbsp; version: indica la versi&oacute;n de XML usada en el documento. La actual es la versi&oacute;n 1.0 con lo que no debe de haber mucho problema. Es obligatorio ponerlo , a no ser que sea un documento externo a otro que ya lo inclu&iacute;a. </p>
      <p>&#149;&nbsp; Encoding: la forma en que se ha codificado el docuemnto. Se puede poner cualquiera, y depende del parser poner o no la codificaci&oacute;n. Por defecto es UTF-8, aunque podr&iacute;a ponerse otras, como UTF-16… No es obligatorio o salvo que sea un documento externo a otro principal. </p>
      <p>&#149;&nbsp; Estandalone: indica si el documento va acompa&ntilde;ado de un DTD(“no”), o no lo necesita(“yes”); en principio no hay porque ponerlo, porque luego se indica el DTD si se necesita. </p>
      <p>&#149;&nbsp; Estructura, marca y contenido de un contenido XML. La estructura de un documento xml es u n conjunto de etiquetas y su contenido siguiendo unas normas. Las marcas est&aacute;n entre los caracteres &lt; y &gt;, y tambi&eacute;n entre &lt;/y &gt;. El contenido es lo que hay entre las marcas que pueden ser otras etiquetas. Podemos distinguir dos tipos de contenido: elemento y atributo. </p>
      <p>&#149;&nbsp; elemento y atributo. Los elementos poseen su propia etiqueta, mientras que los atributos ir&aacute;n dentro de la etiqueta de comienzo del elemento al cual pertenecen esos atributos. Dentro de un documento XML puede haber elementos vacios definidos como tal o porque contienen contenido. </p>
      <p>&lt;temperatura escala=”C”&gt;&lt;/temperatura&gt; </p>
      <p>&lt;temperatura escala=”C”/&gt; </p>
      <p>&#149;&nbsp; En el ejemplo la primera no tiene contenido y la segunda no est&aacute; definida de esa forma ya que lo &uacute;nico que nos interesar&iacute;a ser&iacute;a el atributo. En cuanto a la sintaxis del documento y antes de entrar a las en el estudio de las etiquetas hay que resaltar algunos detalles importantes y a los que nos debemos acostumbrar: </p>
      <p>&#149;&nbsp; Los documentos XML son sensibles a mayusculas , esto es, en ellos se diferencia las mayusculas de las minusculas . Por ello &lt;FICHA&gt; ser&iacute;a una etiqueta diferente a &lt;ficha&gt;. </p>
      <p>&#149;&nbsp; Adem&aacute;s todos los espacios y retornos de carro se tienen en cuenta (dentro de las etiquetas , en los elementos) </p>
      <p>&#149;&nbsp; Hay algunas caracteres especiales reservados, que forman parte de la sintaxis de XML: &lt; , &gt;, &amp;, y ‘. En su lugar cuando queramos representarlos deberemos rusar las entidades &amp;lt;, &amp;gt, &amp;amp, &amp;quot y &amp;apos; respectivamente. Mas adelante hablar&eacute; de las entidades y lo que son , pero basta saber que ahora que si escribimos cualquiera de las secuencias anteriores equivaldr&aacute; a la los correspondientes caracteres citados. </p>
      <p>&#149;&nbsp; Los valores de los atributos de todas las etiquetas deben ir siempre entrecomillados. </p>
      <p>Pasando al contenido en si, vemos etiquetas que nos recuerdan al html, y que contienen datos. Es importante diferenciar entre elementos y etiquetas: los elementos son entidades en si, lo que tiene contenido, mientras que las etiquetas solo describen a los elementos. Un documento HTML est&aacute; compuesto por elementos, y su sintaxis estos se nombran mediante etiquetas. </p>
      <p>&nbsp; </p>
      <p>Hay dos tipos de elementos : los vac&iacute;os y los no vac&iacute;os. Hay varias consideraciones importantes a tener en cuenta al respecto: </p>
      <p>&#149;&nbsp; toda etiqueta no vac&iacute;a debe de tener una etiqueta de cerrado: &lt;etiqueta&gt; debe de estar seguida de &lt;/etiqueta&gt;. Esto se hace para evitar la aberraci&oacute;n (en el buen sentido de la palabra) a la que hab&iacute;an llegado todos los navegadores html de que permitieran no cerrar las etiquetas lo que deja la posibilidad de errores de interpretaci&oacute;n. </p>
      <p>&#149;&nbsp; Todos los elementos deben estar perfectamente anidados: no es valido poner: </p>
      <p>&lt;ficha&gt;&lt;nombre&gt;Angel&lt;/ficha&gt;&lt;/nombre&gt; </p>
      <p>&#149;&nbsp; Los elementos vac&iacute;os son aquellos que no tienen contenido dentro del documento. Un ejemplo de html son las im&aacute;genes. La sintaxis correcta para estos elementos implica que la etiqueta tenga siempre esta forma:&lt;etiqueta/&gt; </p>
      <p>&nbsp; </p>
      <p>D) Documentos bien formados y documentos v&aacute;lidos </p>
      <p>Bien formado: </p>
      <p>Dentro del XML podemos distinguir documentos v&aacute;lidos y documentos bien formados. Un documento est&aacute; bien formado si se dan las m&iacute;nimas condiciones para ser manipulados por las aplicaciones y para ello se deben de dar las siguientes condiciones: </p>
      <p>&#149;&nbsp; Debe aparecer una etiqueta XML con la versi&oacute;n (no es obligatorio pero si recomendable), y es muy frecuente encontrarnos adem&aacute;s un atributo encoding que le dir&aacute; al parser el formato con el que tiene que interpretar los caracteres del documento. As&iacute; para poder interpretar un documento en espa&ntilde;ol con caracteres como la &ntilde; o las tildes pondremos un encoding ISO-8859-1, ya que por defecto usa UTF-8 o UTF-16. </p>
      <p>&#149;&nbsp; Debe haber una etiqueta de inicio y otra de final por cada elemento por cada elemento del XML, salvo cuando sea un elemento vac&iacute;o que pueda tener en una sola etiqueta inicio y final: &lt;temperatura escala=”C”/&gt;. Es decir, todas las etiquetas tienen que estar cerradas. </p>
      <p>&#149;&nbsp; Toda la informaci&oacute;n del documento debe estar agrupada en un elemento principal, es decir, todas las etiquetas deben estar anidadas dentro de la etiqueta padre del resto. En el ejemplo anterior ser&iacute;a &lt;informe&gt;. </p>
      <p>&#149;&nbsp; Tenemos que tener en cuenta que el XML es case sensitive, es decir distingue entre may&uacute;sculas y min&uacute;sculas, pues para el son distintas. </p>
      <p>&#149;&nbsp; El valor de los atributos debe ir siempre entre comillas simples y dobles. </p>
      <p>&#149;&nbsp; Las etiquetas deben de estar siempre bien anidadas , es decir no puede haber elementos solapados, por ejemplo, si tenemos dos elementos y uno contiene al otro no se puede cerrar antes no se puede cerrar antes la etiqueta del primero que la del segundo; debe cerrarse la marca del elemento contenido en primer lugar. </p>
      <p>Si utilizamos un DTD , las etiquetas no pueden tener un mismo nombre con formatos diferentes, o sea, que marcas iguales est&eacute;n en diferentes posiciones del documento. </p>
      <p>&nbsp; </p>
      <p>Documentos v&aacute;lidos </p>
      <p>&nbsp; </p>
      <p>Para que un documento sea v&aacute;lido debemos de tener una herramienta que valide a partir de un documento XML y una DTD. Esta herramienta es un procesador o parsery en el caso de que no produzca ning&uacute;n error genera un arbol del documento (si es un parser de DOM &szlig; ya se ver&aacute; mas adelante). </p>
    <p>La DTD (definici&oacute;n del tipo del documento) es el esquema que debe seguir el documento para que el procesador al compararlo con el documento en s&iacute;, pueda saber si este es valido o no. </p></td>
  </tr>
  <tr> 
    <td width="66" height="21"></td>
    <td width="324" height="21">&nbsp;</td>
    <td width="149"><div align="right"><a href="../index3.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
