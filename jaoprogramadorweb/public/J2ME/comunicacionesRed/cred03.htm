<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Indice J2ME</title>
<META http-equiv=Content-Language content=es>
<META content="Manual J2ME, ejemplos J2ME, codigos J2ME" name=description>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="keywords" content="Manual J2ME, ejemplos J2ME, codigos J2ME">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../../styles/estilos.css" rel="stylesheet" type="text/css">
</head>

<body>
<table class="tablaContenidos">

  <tr> 
    <td height="39" colspan="3"> <h2> J2SE</h2></td>
  </tr>
  <tr> 
    <td colspan="3"><p>Los elementos de J2SE relacionados con la comunicaci&oacute;n 
        que se nos ofrecen en J2ME 
        pertenecen al paquete java.io. De &eacute;l nos llegan las interfaces 
        DataInput y DataOutput, y 
        las clases ByteArrayInputStream, ByteArrayOutputStream, DataInputStream, 
        DataOutputStream, InputStream, InputStreamReader, OutputStream, 
        OutputStreamWriter, PrintStream, Reader y Writer. Recordemos que todas 
        ellas y 
        algunas m&aacute;s se utilizan en J2SE para leer y escribir flujos de 
        datos.</p>
      <p> 
        En el tema anterior (RMS) emple&aacute;bamos algunas de ellas para extraer 
        de un array de bytes, 
        una instancia de un tipo determinado. No obstante, en esta ocasi&oacute;n 
        nos servir&aacute;n 
        principalmente para lo siguiente: en J2ME el paquete javax.microedition.io 
        nos 
        proporciona el soporte para crear el acceso a la red que en J2SE facilitaba 
        el paquete 
        java.net y que aqu&iacute; no tendremos ni necesitamos (uno existe en 
        lugar del otro). </p>
      <p>Por tanto, 
        gracias a este paquete crearemos y manejaremos las conexiones de red que 
        deseemos, sean 
        del tipo que sean (HTTP, sockets, etc.). Una vez creadas, ser&aacute; 
        necesario disponer de 
        recursos con los que leer y escribir los datos que viajen por esa conexi&oacute;n, 
        siendo aqu&iacute; donde 
        entra en juego la java.io.</p>
      <p>Si la javax.microedition.io nos sirve para instanciar un canal de comunicaci&oacute;n, 
        la 
        java.io nos sirve para leer y escribir datos en &eacute;l.</p>
      <p>&nbsp;</p></td>
  </tr>
  <tr> 
    <td width="66" height="21"></td>
    <td width="324" height="21">&nbsp;</td>
    <td width="149"><div align="right"><a href="../index.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
