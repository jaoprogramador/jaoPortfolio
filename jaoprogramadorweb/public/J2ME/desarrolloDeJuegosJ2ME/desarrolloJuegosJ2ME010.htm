<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Indice J2ME</title>
<META http-equiv=Content-Language content=es>
<META content="Manual J2ME, ejemplos J2ME, codigos J2ME" name=description>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="keywords" content="Manual J2ME, ejemplos J2ME, codigos J2ME">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../../styles/estilos.css" rel="stylesheet" type="text/css">
</head>


<body>
<table class="tablaContenidos">

  <tr> 
    <td height="39" colspan="3"> <h2>LayerManager extends Object</h2></td>
  </tr>
  <tr> 
    <td height="258" colspan="3"> <p>Esta clase representar&aacute; un &quot;organizador 
        de capas&quot; y nos servir&aacute; para manejar las diferentes capas 
        o Layers con las que compondremos la gr&aacute;fica de nuestro juego. 
        Con &eacute;l, podremos elegir la regi&oacute;n a dibujar (ventana de 
        visi&oacute;n) del conjunto de capas superpuestas que nos interese en 
        cada momento, en el orden de capas definido.<br>
        Este orden en profundidad es dado por un &iacute;ndice (z-orden) en el 
        cual el valor 0 es asignado a la capa m&aacute;s cercana al usuario (la 
        capa de techos y nubes que coment&aacute;bamos) y as&iacute; avanza hasta 
        llegar a la m&aacute;s alejada de los ojos del usuario (la capa de suelos 
        y fondos). El &iacute;ndice siempre es correlativo: si una capa se elimina, 
        los &iacute;ndices se reasignan de forma que no existan saltos en la numeraci&oacute;n 
        de las capas.<br>
        La regi&oacute;n visible de las capas viene marcada por una ventana de 
        visi&oacute;n que definiremos con setViewWindow(). Cambiando la posici&oacute;n 
        de &eacute;sta, conseguiremos efectos de scroll y cambios en la panor&aacute;mica 
        del usuario (si movemos la ventana a la derecha, provocaremos un efecto 
        de movimiento del conjunto gr&aacute;fico visible a la izquierda). El 
        tama&ntilde;o del &aacute;rea visible ser&aacute; ajustado a la capacidad 
        de la pantalla de cada dispositivo concreto.<br>
        Veamos el ejemplo que aparece en la especificaci&oacute;n MIDP 2.0 de 
        SUN. En &eacute;l, la ventana se define en el punto (52, 11) del sistema 
        de coordenadas del LayerManager, de tama&ntilde;o 85 x 85 p&iacute;xeles. 
        Las dos capas existentes, colocadas respectivamente en los puntos (75, 
        25) y (18, 37), ser&aacute;n contempladas a trav&eacute;s de la ventana 
        definida.</p>
      <p>Todos los elementos de esta clase son m&eacute;todos, con un solo constructor:<br>
        - LayerManager(). Constructor de la clase, el cual crea un nuevo LayerManager 
        vac&iacute;o.<br>
        - void append(Layer l). A&ntilde;ade la capa par&aacute;metro al organizador, 
        asign&aacute;ndole autom&aacute;ticamente un &iacute;ndice superior al 
        de todas las capas existentes hasta el momento. Si la capa ya existe ser&aacute; 
        borrada e insertada de nuevo para que el &iacute;ndice quede reasignado 
        convenientemente.<br>
        - Layer getLayerAt(int index). Obtiene la capa cuyo &iacute;ndice coincide 
        con el pasado como par&aacute;metro. &Eacute;ste debe ser mayor o igual 
        a 0 y menor estricto que el n&uacute;mero de las capas existentes en el 
        organizador.<br>
        - int getSize(). Devuelve el n&uacute;mero de capas del LayerManager.<br>
        - void insert(Layer l, int index). A&ntilde;ade la capa par&aacute;metro 
        al organizador asign&aacute;ndole el &iacute;ndice dado como segundo par&aacute;metro, 
        no debiendo ser este &iacute;ndice ni menor que 0 ni mayor que el n&uacute;mero 
        de capas ya existentes (si hay n capas, el &iacute;ndice de la &uacute;ltima 
        de ellas ser&aacute; n-1). Si la capa ya existe ser&aacute; borrada e 
        insertada de nuevo.<br>
        - void paint(Graphics g, int x, int y). Dibuja el conjunto de capas que 
        alberga el LayerManager utilizando el Graphics par&aacute;metro. Este 
        contenido ser&aacute; mostrado a trav&eacute;s de la ventana de visi&oacute;n 
        mostrando las capas en orden ascendente de su z-orden, siempre que la 
        capa sea marcada visible y al menos una parte de ella caiga dentro de 
        la ventana.</p>
      <p>Las coordenadas pasadas como par&aacute;metro dan el punto donde fijamos 
        la ventana de visi&oacute;n del organizador, relativo al origen del objeto 
        Graphics utilizado. Esto ser&aacute; &uacute;til si deseamos, por ejemplo, 
        dejar siempre invariable un marcador de extensi&oacute;n 17 p&iacute;xeles 
        en la parte superior del juego, para lo cual mostrar&iacute;amos la ventana 
        a partir del punto (17, 17) como vemos en la anterior figura. La traslaci&oacute;n 
        del objeto Graphics afectar&iacute;a a su origen influyendo a su vez a 
        la presentaci&oacute;n anterior, as&iacute; como tambi&eacute;n lo har&aacute; 
        a &eacute;sta, el &aacute;rea de clipping del Graphics: si no es lo suficientemente 
        grande s&oacute;lo una parte de la ventana ser&aacute; dibujada en pantalla.<br>
        - void remove(Layer l). Elimina la capa dada como par&aacute;metro del 
        LayerManager. Si &eacute;sta no existe, no se hace nada.<br>
        - void setViewWindow(int x, int y, int width, int height). Fija la ventana 
        por la que contemplamos el conjunto de capas que alberga el LayerManager, 
        permiti&eacute;ndonos as&iacute; controlar qu&eacute; regi&oacute;n ofrecemos 
        visible al usuario y qu&eacute; zonas ocultamos del conjunto.<br>
        &Eacute;sta ser&aacute; la regi&oacute;n que el m&eacute;todo paint() 
        anterior dibujar&aacute;. Por defecto, se mostrar&aacute; desde el punto 
        (0,0) un ancho y alto ambos dados por Integer.MAX_VALUE, es decir, toda 
        la gr&aacute;fica posible. </p>
      </td>
  </tr>
  <tr> 
    <td width="66" height="21"></td>
    <td width="324" height="21">&nbsp;</td>
    <td width="149"><div align="right"><a href="../index.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
