<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>API de persistencia</title>
<META http-equiv=Content-Language content=es>
<META content="Programación en EJB 3.0 API de persistencia" name=description>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="keywords" content="EJB 3.0 API de persistencia">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../../styles/estilos.css" rel="stylesheet" type="text/css">
</head>

<body>
<table class="tablaContenidos">

  <tr> 
    <td height="39" colspan="3"> <h2> API de persistencia</h2></td>
  </tr>
  <tr> 
    <td height="258" colspan="3"> <p>Es el API de persistencia desarrollada para 
        la plataforma Java EE e incluida en el estandar EJB 3 (Enterprise Java 
        Beans) .</p>
      <p><br>
        El objetivo que persigue el diseno de esta API es no perder las ventajas 
        de la orientacion a objetos al interactuar con una base<br>
        de datos, y permitir usar objetos regulares conocidos como POJOS (Plain 
        Old Java Object )</p>
      <p><br>
        Consta de:<br>
        &#8226;Java Persistence API<br>
        &#8226;Query Language<br>
        &#8226;Object relational mapping metadata<br>
      </p>
      <p>Primero veremos algunas partes importantes de la API, como la interfaz 
        EntityManager. Esta interfaz es en la que se apoya la API de persistencia 
        y la que se encarga del mapeo entre una tabla relacional y su objeto Java. 
        Funcionalmente es similar a la clase Session de Hibernate o a PersistenceManager 
        de JDO. Proporciona m&eacute;;todos para manejar la persistencia de un 
        Bean de Entidad, permite a&ntilde;adir, eliminar, actualizar y consultar 
        as&iacute; como manejar su ciclo de vida. Sus m&eacute;todos m&aacute;;s 
        importantes son:</p>
      <p> - persist(Object entity) - almacena el objeto entity en la base de datos.</p>
      <p> - merge(T entity) - actualiza las modificaciones en la entidad devolviendo 
        la lista resultante.</p>
      <p> - remove(Object entity) - elima la entidad.</p>
      <p> - find(Class&lt;T&gt; entity, Object primaryKey) - busca la entidad 
        a trav&eacute;s de su clave primaria.</p>
      <p> - flush() - sincroniza las entidades con el contenido de la base de 
        datos.</p>
      <p> - refresh(Object entity) - refresca el estado de la entidad con su contenido 
        en la base de datos.</p>
      <p> - createQuery(String query) - Crea una query utilizando el lenguaje 
        JPQL.</p>
      <p> - createNativeQuery() - Crea una query utilizando el lenguaje SQL.</p>
      <p> - isOpen() - Comprueba si est&aacute;; abierto el EntityManager.</p>
      <p> - close() - Cierra el EntityManager. </p>
      <p>Podemos obtener una referencia al EntityManager a trav&eacute;s de la 
        anotaci&oacute;n @PersistenceContext. El contenedor de EJB nos proporciona 
        el contexto de persistencia mediante inyecci&oacute;n por lo que no tendremos 
        que preocuparnos de su creaci&oacute;n y destrucci&oacute;n.</p>
      <p>@PersistenceContext<br>
        EntityManager entityManager;</p>
      <p>Otra forma de obtener un EntityManager es a trav&eacute;s de la factor&iacute;a 
        EntityManagerFactory con el nombre del contexto de persistencia configurado 
        en el persistence.xml .</p>
      <p><br>
        EntityManagerFactory emf = Persistence.createEntityManagerFactory(&quot;TestPersistence&quot;);<br>
        EntityManager em = emf.createEntityManager();</p>
      <p>En el m&eacute;todo createEntityManagerFactory de la clase Persistence 
        se debe pasar el nombre del contexto definido en el persistence.xml. Persistence.xml 
        es donde se definen los contextos de persistencia de la aplicaci&oacute;n. 
        Se debe situar dentro del directorio META-INF. </p>
      <p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>
        &lt;persistence version=&quot;1.0&quot; xmlns=&quot;http://java.sun.com/xml/ns/persistence&quot; 
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/persistence 
        http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd&quot;&gt;<br>
        &lt;persistence-unit name=&quot;EJB3JAO&quot; transaction-type=&quot;JTA&quot;&gt;<br>
        &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;<br>
        &lt;jta-data-source&gt;java:/ProyectoBaseDS&lt;/jta-data-source&gt;<br>
        &lt;class&gt;com.prueba.EntityPrueba&lt;/class&gt;<br>
        &lt;class&gt;com.prueba.DiscosEntity&lt;/class&gt;<br>
        &lt;exclude-unlisted-classes&gt;true&lt;/exclude-unlisted-classes&gt;<br>
        &lt;properties&gt;<br>
        &lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot;/&gt;<br>
        &lt;/properties&gt;<br>
        &lt;/persistence-unit&gt;<br>
        &lt;/persistence&gt; </p>
      </td>
  </tr>
  <tr> 
    <td width="66" height="21"></td>
    <td width="324" height="21">&nbsp;</td>
    <td width="149"><div align="right"><a href="../index.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
