<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Interceptors y Entity Listeners</title>
<META http-equiv=Content-Language content=es>
<META content="Programación en EJB 3.0,Programas EJB 3.0 Interceptors y Entity Listeners,Aplicaciones en EJB 3.0 Interceptors y Entity Listeners,Ejercicios en EJB 3.0 Interceptors y Entity Listeners, Ejemplos de EJB 3.0,Tutorial de EJB 3.0 Interceptors y Entity Listeners,Manual EJB 3.0 Interceptors y Entity Listeners" name=description>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="keywords" content="EJB 3.0 Interceptors y Entity Listeners, Manual EJB 3.0 Interceptors y Entity Listeners, tutorial EJB 3.0 Interceptors y Entity Listeners, Ejemplos EJB 3.0 Interceptors y Entity Listeners, ejercicios EJB 3.0 Interceptors y Entity Listeners">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../../styles/estilos.css" rel="stylesheet" type="text/css">
</head>

<body>
<table class="tablaContenidos">

  <tr> 
    <td height="39" colspan="3"> <h2> Interceptors y Entity Listeners</h2></td>
  </tr>
  <tr> 
    <td height="258" colspan="3"> <p>Un interceptor es una simple clase java cuyos 
        m&eacute;todos siempre se ejecutan cuando se llama al m&eacute;todo de 
        otra clase<br>
        totalmente diferente.</p>
      <p><br>
        Un interceptor se puede configurar para un session bean (stateless &oacute; 
        stateful), o para un message-driven bean, NO para los entity-beans.</p>
      <p><br>
        @Stateless(mappedName=&quot;AuditoriaBean&quot;)<br>
        @Interceptors(ej4.AuditoriaListener.class)<br>
        public class AuditoriaBean implements AuditoriaRemote {<br>
        public void setTimeTrace(boolean trace) {}<br>
        public boolean getTimeTrace() {<br>
        return false;<br>
        }<br>
        }<br>
        public class AuditoriaListener {<br>
        @AroundInvoke<br>
        public Object auditoria(InvocationContext invocation) throws Exception 
        {<br>
        try {<br>
        return invocation.proceed();<br>
        } finally {<br>
        String classe = invocation.getClass().getName();<br>
        String metodo = invocation.getMethod().getName();<br>
        String resultado = classe + &quot;:&quot; + metodo + &quot; --&gt; +new 
        java.util.Date();<br>
        System.out.println(resultado);<br>
        }<br>
        }<br>
        }<br>
      </p>
      </td>
  </tr>
  <tr> 
    <td width="66" height="21"></td>
    <td width="324" height="21">&nbsp;</td>
    <td width="149"><div align="right"><a href="../index.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
