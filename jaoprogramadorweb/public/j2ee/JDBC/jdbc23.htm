<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>La clase PreparedStatement</title>
<META http-equiv=Content-Language content=es>
<META content="Programación en JDBC,Programas JDBC,Aplicaciones en JDBC,Ejercicios en JDBC, Ejemplos de JDBC,Tutoriales de JDBC,Manuales JDBC" name=description>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="keywords" content="JDBC, Manual JDBC, tutorial JDBC, Ejemplos JDBC, ejercicios JDBC">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../../styles/estilos.css" rel="stylesheet" type="text/css">
</head>

<body>
<table class="tablaContenidos">

  <tr> 
    <td height="39" colspan="3"> <h2> La clase PreparedStatement</h2></td>
  </tr>
  <tr> 
    <td height="258" colspan="3"> <p>La interfase PreparedStatement hereda de 
        Statement y difiere de esta en dos maneras.</p>
      <p>&#8226; Las instancias de PreparedStatement contienen una sentencia SQL 
        que ya ha sido compilada. Esto es lo que hace que se le llame &#8216;preparada&#8217;.</p>
      <p>&#8226; La sentencia SQL contenida en un objeto PreparedStatement pueden 
        tener uno o m&aacute;s par&aacute;metros IN. Un par&aacute;metro IN es 
        aquel cuyo valor no se especifica en la sentencia SQL cuando se crea. 
        En vez de ello la sentencia tiene un interrogante (&#8216;?&#8217;) como 
        un &#8216;encaje&#8217; para cada par&aacute;metro IN. Debe suministrarse 
        un valor para cada interrogante mediante el m&eacute;todo apropiado setXXX 
        antes de ejecutar la sentencia.</p>
      <p>Como los objetos PreparedStatement est&aacute;n precompilados, su ejecuci&oacute;n 
        es m&aacute;s r&aacute;pida que los objetos Statement. Consecuentemente, 
        una sentencia SQL que se ejecute muchas veces a menudo se crea como PreparedStatement 
        para incrementar su eficacia.</p>
      <p>Siendo una subclase de Statement, PreparedStatement hereda toda la funcionalidad 
        de Statement. Adem&aacute;s , se a&ntilde;ade un set completo de m&eacute;todos 
        necesarios para fijar los valores que van a ser enviados a la base de 
        datos en el lugar de los &#8216;encajes&#8217; para los par&aacute;metros 
        IN. Tambi&eacute;n se modifican los tres m&eacute;todos execute, executeQuery 
        y executeUpdate de tal forma que no toman argumentos. Los formatos de 
        Statement de estos m&eacute;todos (los formatos que toman una sentencia 
        SQL como argumento) no deber&iacute;an usarse nunca con objetos PreparedStatement. 
        <br>
      </p>
      <p>Creaci&oacute;n de objetos PreparedStatement</p>
      <p><br>
        El siguiente ejemplo, donde con es un objeto Connection, crea un objeto 
        PreparedStatement conteniendo una sentencia SQL con dos &#8216;encajes&#8217; 
        para par&aacute;metros IN.</p>
      <p>PreparedStatement pstmt = con.prepareStatement(<br>
        &quot;UPDATE table4 SET m = ? WHERE x = ?&quot;);<br>
      </p>
      <p>El objeto pstmt contiene ahora la sentencia &#8220;UPDATE table4 SET 
        m= ? WHERE x = ? &#8220;, que ya ha sido enviada a la base de datos y 
        ha sido preparada para su ejecuci&oacute;n. </p>
      <p>&nbsp; </p>
      </td>
  </tr>
  <tr> 
    <td width="66" height="21"></td>
    <td width="324" height="21">&nbsp;</td>
    <td width="149"><div align="right"><a href="../index.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
