<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Modelos en dos y tres pisos. </title>
<META http-equiv=Content-Language content=es>
<META content="Programación en JDBC,Programas JDBC,Aplicaciones en JDBC,Ejercicios en JDBC, Ejemplos de JDBC,Tutoriales de JDBC,Manuales JDBC" name=description>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="keywords" content="JDBC, Manual JDBC, tutorial JDBC, Ejemplos JDBC, ejercicios JDBC">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../../styles/estilos.css" rel="stylesheet" type="text/css">
</head>

<body>
<table class="tablaContenidos">

  <tr> 
    <td height="39" colspan="3"> <h2> <strong> Modelos en dos y tres pisos. </strong></h2></td>
  </tr>
  <tr> 
    <td height="258" colspan="3"> <p>El API JDBC soporta los modelos en dos y 
        tres pisos de acceso a base de datos.</p>
      <p>En el modelo de dos-pisos, un applet Java o una aplicaci&oacute;n habla 
        directamente con la base de datos. Esto requiere un driver JDBC que pueda 
        comunicar con el gestor de base de datos particular al que se pretende 
        acceder. Las sentencias SQL de usuario se env&iacute;an a la base de datos, 
        y el resultado de estas sentencias se env&iacute;an al usuario. La base 
        de datos puede estar localizada en otra m&aacute;quina a la que el usuario 
        se conecta mediante la red. Esta es una configuraci&oacute;n Cliente/Servidor 
        en la que la m&aacute;quina del usuario es el cliente y la m&aacute;quina 
        que hospeda a la base de datos es el servidor. La red puede ser una intranet, 
        por ejemplo, que conecta a los empleados dentro de la corporaci&oacute;n, 
        o puede ser Internet.</p>
      <p>En el modelo de tres-pisos, los comandos se env&iacute;an a un &#8216;piso 
        intermedio&#8217; de servicios, que env&iacute;a las sentencias SQL a 
        la base de datos. La base de datos procesa las sentencias SQL y devuelve 
        los resultados a el &#8216;piso intermedio&#8217;, que a su vez lo env&iacute;a 
        al usuario. Los directores de IS encuentran este modelo muy atractivo 
        por que el &#8216;piso intermedio&#8217; hace posible mantener el control 
        sobre los datos y los tipos de actualizaciones que pueden hacerse en los 
        datos corporativos. Otra ventaja es que el usuario puede emplear un API 
        de alto nivel m&aacute;s sencillo que es traducido por el &#8216;piso 
        intermedio&#8217; en las llamadas de bajo nivel apropiadas. Finalmente 
        en muchos casos la arquitectura de tres niveles puede proporcionar ventajas 
        de rendimiento.</p>
      <p>Hasta ahora, este nivel intermedio ha sido escrito en lenguajes como 
        C &oacute; C++, que ofrecen un rendimiento m&aacute;s r&aacute;pido. De 
        cualquier modo, con la introducci&oacute;n de compiladores optimizadores 
        que traducen el bytecode en c&oacute;digo m&aacute;quina eficiente, se 
        est&aacute; convirtiendo en pr&aacute;ctico desarrollar este nivel intermedio 
        en Java. <br>
        <br>
        Esta es una gran ventaja al hacer posible aprovechar las caracter&iacute;sticas 
        de robustez, multiproceso y seguridad de Java.<br>
      </p>
      <p>&nbsp; </p>
      </td>
  </tr>
  <tr> 
    <td width="66" height="21"></td>
    <td width="324" height="21">&nbsp;</td>
    <td width="149"><div align="right"><a href="../index.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
