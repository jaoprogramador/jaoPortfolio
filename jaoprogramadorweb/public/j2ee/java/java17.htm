<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Interfaces</title>
<META http-equiv=Content-Language content=es>
<META content="Programación en Java,Programas Java,Aplicaciones en Java,Ejercicios en Java, Ejemplos de Java,Tutorial de Java,Manual Java" name=description>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="keywords" content="Java, Manual Java, tutorial Java, Ejemplos Java, ejercicios Java">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../../styles/estilos.css" rel="stylesheet" type="text/css">
</head>

<body>
<table class="tablaContenidos">

  <tr> 
    <td height="39" colspan="3"> <h2> Interfaces</h2></td>
  </tr>
  <tr> 
    <td height="258" colspan="3"> <h3>Concepto de interface</h3>
      <p> Una interface es un conjunto de declaraciones de m&eacute;todos (sin 
        definici&oacute;n). Tambi&eacute;n puede definir<br>
        constantes, que son impl&iacute;citamente public, static y final, y deben 
        siempre inicializarse en la<br>
        declaraci&oacute;n. Estos m&eacute;todos definen un tipo de conducta. 
        Todas las clases que implementan una<br>
        determinada interface est&aacute;n obligadas a proporcionar una definici&oacute;n 
        de los m&eacute;todos de la interface,<br>
        y en ese sentido adquieren una conducta o modo de funcionamiento.<br>
        Una clase puede implementar una o varias interfaces. Para indicar que 
        una clase implementa<br>
        una o m&aacute;s interfaces se ponen los nombres de las interfaces, separados 
        por comas, detr&aacute;s de la<br>
        palabra implements, que a su vez va siempre a la derecha del nombre de 
        la clase o del nombre de la<br>
        super-clase en el caso de herencia. Por ejemplo,<br>
        public class CirculoGrafico extends Circulo<br>
        implements Dibujable, Cloneable {<br>
        ...<br>
        }<br>
        &iquest;Qu&eacute; diferencia hay entre una interface y una clase abstract? 
        Ambas tienen en com&uacute;n que<br>
        pueden contener varias declaraciones de m&eacute;todos (la clase abstract 
        puede adem&aacute;s definirlos). A<br>
        pesar de esta semejanza, que hace que en algunas ocasiones se pueda sustituir 
        una por otra, existen<br>
        tambi&eacute;n algunas diferencias importantes:<br>
        1. Una clase no puede heredar de dos clases abstract, pero s&iacute; puede 
        heredar de una clase<br>
        abstract e implementar una interface, o bien implementar dos o m&aacute;s 
        interfaces.<br>
        2. Una clase no puede heredar m&eacute;todos -definidos- de una interface, 
        aunque s&iacute; constantes.<br>
        3. Las interfaces permiten mucha m&aacute;s flexibilidad para conseguir 
        que dos clases tengan el<br>
        mismo comportamiento, inpendientemente de su situaci&oacute;n en la jerarqu&iacute;a 
        de clases de<br>
        Java.<br>
        4. Las interfaces permiten &#8220;publicar&#8221; el comportamiento de 
        una clase desvelando un m&iacute;nimo<br>
        de informaci&oacute;n.5. Las interfaces tienen una jerarqu&iacute;a propia, 
        independiente y m&aacute;s flexible que la de las<br>
        clases, ya que tienen permitida la herencia m&uacute;ltiple.<br>
        6. De cara al polimorfismo (recordar el Apartado 1.3.8, a partir de la 
        p&aacute;gina 15), las<br>
        referencias de un tipo interface se pueden utilizar de modo similar a 
        las clases abstract.</p>
      <h3>Definici&oacute;n de interfaces</h3>
      <p>Una interface se define de un modo muy similar a las clases. A modo de 
        ejemplo se reproduce aqu&iacute;<br>
        la definici&oacute;n de la interface Dibujable dada en el Apartado 1.3.5:, 
        en la p&aacute;gina 12:<br>
        // fichero Dibujable.java<br>
        import java.awt.Graphics;<br>
        public interface Dibujable {<br>
        public void setPosicion(double x, double y);<br>
        public void dibujar(Graphics dw);<br>
        }<br>
        Cada interface public debe ser definida en un fichero *.java con el mismo 
        nombre de la<br>
        interface. Los nombres de las interfaces suelen comenzar tambi&eacute;n 
        con may&uacute;scula.<br>
        Las interfaces no admiten m&aacute;s que los modificadores de acceso public 
        y package. Si la<br>
        interface no es public no ser&aacute; accesible desde fuera del package 
        (tendr&aacute; la accesibilidad por<br>
        defecto, que es package). Los m&eacute;todos declarados en una interface 
        son siempre public y abstract,<br>
        de modo impl&iacute;cito.</p>
      <h3>Herencia en interfaces</h3>
      <p>Entre las interfaces existe una jerarqu&iacute;a (independiente de la 
        de las clases) que permite herencia<br>
        simple y m&uacute;ltiple. Cuando una interface deriva de otra, incluye 
        todas sus constantes y declaraciones<br>
        de m&eacute;todos.<br>
        Una interface puede derivar de varias interfaces. Para la herencia de 
        interfaces se utiliza<br>
        asimismo la palabra extends, seguida por el nombre de las interfaces de 
        las que deriva, separadas<br>
        por comas.<br>
        Una interface puede ocultar una constante definida en una super-interface 
        definiendo otra<br>
        constante con el mismo nombre. De la misma forma puede ocultar, re-declar&aacute;ndolo 
        de nuevo, la<br>
        declaraci&oacute;n de un m&eacute;todo heredado de una super-interface.<br>
        Las interfaces no deber&iacute;an ser modificadas m&aacute;s que en caso 
        de extrema necesidad. Si se<br>
        modifican, por ejemplo a&ntilde;adiendo alguna nueva declaraci&oacute;n 
        de un m&eacute;todo, las clases que hayan<br>
        implementado dicha interface dejar&aacute;n de funcionar, a menos que 
        implementen el nuevo m&eacute;todo.</p>
      <h3>Utilizaci&oacute;n de interfaces</h3>
      <p>Las constantes definidas en una interface se pueden utilizar en cualquier 
        clase (aunque no<br>
        implemente la interface) precedi&eacute;ndolas del nombre de la interface, 
        como por ejemplo (suponiendo<br>
        que PI hubiera sido definida en Dibujable):<br>
        area = 2.0*Dibujable.PI*r;<br>
        Sin embargo, en las clases que implementan la interface las constantes 
        se pueden utilizar<br>
        directamente, como si fueran constantes de la clase. A veces se crean 
        interfaces para agrupar<br>
        constantes simb&oacute;licas relacionadas (en este sentido pueden en parte 
        suplir las variables enum de<br>
        C/C++).De cara al polimorfismo, el nombre de una interface se puede utilizar 
        como un nuevo tipo de<br>
        referencia. En este sentido, el nombre de una interface puede ser utilizado 
        en lugar del nombre de<br>
        cualquier clase que la implemente, aunque su uso estar&aacute; restringido 
        a los m&eacute;todos de la interface.<br>
        Un objeto de ese tipo puede tambi&eacute;n ser utilizado como valor de 
        retorno o como argumento de un<br>
        m&eacute;todo.</p>
      <h3>&nbsp;</h3>
      </td>
  </tr>
  <tr> 
    <td width="66" height="21"></td>
    <td width="324" height="21">&nbsp;</td>
    <td width="149"><div align="right"><a href="../index.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
