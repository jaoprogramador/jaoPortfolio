<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>C&oacute;mo hacer una p&aacute;gina AJAX</title>
<META http-equiv=Content-Language content=es>
<META content="Programación,Programas,Aplicaciones,Ejercicios, Ejemplos,Tutoriales,Manuales" name=description>
<meta name="keywords" content="Primera página AJAX, Como hacer una pagina AJAX, Manual AJAX, tutorial AJAX, Ejemplos AJAX, ejercicios AJAX">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../../styles/estilos.css" rel="stylesheet" type="text/css">
</head>
<body>
<table class="tablaContenidos">
  <tr> 
    <td height="39" colspan="3"> <h2>Funciones para eventos</h2></td>
  </tr>
  <tr> 
    <td height="394" colspan="3"> <p>El m&oacute;dulo de eventos de Prototype 
        es uno de los menos desarrollados, por lo que va a ser<br>
        completamente redise&ntilde;ado en las pr&oacute;ximas versiones del framework. 
        A&uacute;n as&iacute;, Prototype ofrece<br>
        una soluci&oacute;n sencilla y compatible con todos los navegadores para 
        manejar los eventos de la<br>
        aplicaci&oacute;n. Event.observe() registra los eventos, Event almacena 
        el objeto con la informaci&oacute;n<br>
        del evento producido y Event.stopObserving() permite eliminar los eventos 
        registrados.<br>
        &lt;div id=&quot;pinchable&quot;&gt;Si se pulsa en este DIV, se muestra 
        un mensaje&lt;/div&gt;<br>
        // Registrar el evento<br>
        Event.observe('pinchable', 'click', procesaEvento, false);<br>
        // Eliminar el evento registrado<br>
        // Event.stopObserving('pinchable', 'click', procesaEvento, false);<br>
        function procesaEvento(e) {<br>
        // Obtener el elemento que ha originado el evento (el DIV)<br>
        var elemento = Event.element(e);<br>
        // Determinar la posicion del puntero del rat&oacute;n<br>
        var coordenadas = [Event.pointerX(e), Event.pointerY(e)];<br>
        // Mostrar mensaje con los datos obtenidos<br>
        alert(&quot;Has pinchado el DIV '&quot;+elemento.id+&quot;' con el raton 
        en la posicion<br>
        (&quot;+coordenadas[0]+&quot;,&quot;+coordenadas[1]+&quot;)&quot;);<br>
        // Evitar la propagacion del evento<br>
        Event.stop(e);<br>
        }<br>
        La sintaxis completa del m&eacute;todo Event.observe() se muestra a continuaci&oacute;n:Event.observe(elemento, 
        nombreEvento, funcionManejadora, [usarCapture]);<br>
        El primer argumento (elemento) indica el identificador del elemento o 
        el propio elemento que<br>
        puede originar el evento. El segundo argumento (nombreEvento) indica el 
        nombre del evento<br>
        que se quiere manejar, sin incluir el prefijo on (load, click, mouseover, 
        etc.). El tercer argumento<br>
        (funcionManejadora) es el nombre de la funci&oacute;n que procesa el evento 
        cuando se produce. El<br>
        &uacute;ltimo par&aacute;metro (usarCapture) no se suele emplear, pero 
        indica si se debe utilizar la fase de<br>
        capture o la fase de bubbling.<br>
        El objeto Event incluye la informaci&oacute;n disponible sobre el evento 
        producido. A continuaci&oacute;n se<br>
        muestra una tabla con sus m&eacute;todos y propiedades principales:<br>
        M&eacute;todo/Propiedad Descripci&oacute;n<br>
        element() Devuelve el elemento que ha originado el evento (un div, un 
        bot&oacute;n, etc.)<br>
        isLeftClick() Indica si se ha pulsado el bot&oacute;n izquierdo del rat&oacute;n<br>
        pointerX()<br>
        pointerY()<br>
        Posici&oacute;n x e y del puntero del rat&oacute;n<br>
        stop() Detiene la propagaci&oacute;n del evento<br>
        observers() Devuelve un array con todos los eventos registrados en la 
        p&aacute;gina<br>
        Adem&aacute;s, Event define una serie de constantes para referirse a las 
        teclas m&aacute;s habituales que se<br>
        manejan en las aplicaciones (tabulador, ENTER, flechas de direcci&oacute;n, 
        etc.) Las constantes<br>
        definidas son KEY_BACKSPACE, KEY_TAB, KEY_RETURN, KEY_ESC, KEY_LEFT, KEY_UP, 
        KEY_RIGHT,<br>
        KEY_DOWN, KEY_DELETE.<br>
        Prototype tambi&eacute;n incluye otros m&eacute;todos &uacute;tiles para 
        la gesti&oacute;n de eventos con formularios:<br>
        Form.Observer(formulario, frecuencia, funcionManejadora);<br>
        Form.Observer() permite monitorizar el formulario indicado cada cierto 
        tiempo (el tiempo se<br>
        indica en segundos mediante el par&aacute;metro frecuencia). Si se produce 
        cualquier cambio en el<br>
        formulario, se ejecuta la funci&oacute;n cuyo nombre se indica en el par&aacute;metro 
        funcionManejadora.<br>
        Form.Observer() se emplea para los formularios que contienen elementos 
        sin eventos<br>
        registrados que procesen sus cambios.<br>
        Otra funci&oacute;n similar es Form.EventObserver() cuya definici&oacute;n 
        formal es:<br>
        Form.EventObserver(formulario, funcionManejadora);<br>
        La principal diferencia de Form.EventObserver() respecto a Form.Observer() 
        es que, en este<br>
        caso, se utilizan los eventos registrados por los elementos del formulario 
        para detectar si se ha<br>
        producido alg&uacute;n cambio en el formulario.</p></td>
  </tr>
  <tr> 
    <td width="66" height="21"></td>
    <td width="324" height="21">&nbsp;</td>
    <td width="149"><div align="right"><a href="../index.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
