<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>C&oacute;mo hacer una p&aacute;gina AJAX</title>
<META http-equiv=Content-Language content=es>
<META content="Programación,Programas,Aplicaciones,Ejercicios, Ejemplos,Tutoriales,Manuales" name=description>
<meta name="keywords" content="Primera página AJAX, Como hacer una pagina AJAX, Manual AJAX, tutorial AJAX, Ejemplos AJAX, ejercicios AJAX">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<META content=euskalnet.net/jaoprogramador name=author>
<META content="Copyright (c) 2005 jaoprogramador" name=copyright>
<META scheme=RFC1766 content=español name=DC.Language>
<META content=es,sp,spanish,español name=lang>
<META content=all name=robots>
<link href="../../styles/estilos.css" rel="stylesheet" type="text/css">
</head>
<body>
<table class="tablaContenidos">
  <tr> 
    <td height="39" colspan="3"> <h2>Ofuscar el código JavaScript</h2></td>
  </tr>
  <tr> 
    <td height="394" colspan="3"> <p>El c&oacute;digo de las aplicaciones JavaScript, 
        al igual que el resto de contenidos de las p&aacute;ginas web, est&aacute; 
        disponible para ser accedido y visualizado por cualquier usuario. Con 
        la aparici&oacute;n de las aplicaciones basadas en AJAX, muchas empresas 
        han desarrollado complejas aplicaciones cuyo c&oacute;digo fuente est&aacute; 
        a disposici&oacute;n de cualquier usuario.</p>
      <p><br>
        Aunque se trata de un problema casi imposible de solucionar, existen t&eacute;cnicas 
        que minimizan el problema de que se pueda acceder libremente al c&oacute;digo 
        fuente de la aplicaci&oacute;n. La principal t&eacute;cnica es la de ofuscar 
        el c&oacute;digo fuente de la aplicaci&oacute;n.<br>
        Los ofuscadores utilizan diversos mecanismos para hacer casi imposible 
        de entender el c&oacute;digo fuente de una aplicaci&oacute;n. Manteniendo 
        el comportamiento de la aplicaci&oacute;n, consiguen ensuciar y dificultar 
        tanto el c&oacute;digo que no es mayor problema que alguien pueda acceder 
        a ese c&oacute;digo.<br>
        El programa ofuscador Jasob (http://www.jasob.com/) ofrece un ejemplo 
        del resultado de ofuscar cierto c&oacute;digo JavaScript. Este es el c&oacute;digo 
        original antes de ofuscarlo:<br>
        //------------------------------------------------------<br>
        // Calculate salary for each employee in &quot;aEmployees&quot;.<br>
        // &quot;aEmployees&quot; is array of &quot;Employee&quot; objects.<br>
        //------------------------------------------------------<br>
        function CalculateSalary(aEmployees)<br>
        {<br>
        var nEmpIndex = 0;<br>
        while (nEmpIndex &lt; aEmployees.length)<br>
        {<br>
        var oEmployee = aEmployees[nEmpIndex];<br>
        oEmployee.fSalary = CalculateBaseSalary(oEmployee.nType,<br>
        oEmployee.nWorkingHours);<br>
        if (oEmployee.bBonusAllowed == true){<br>
        oEmployee.fBonus = CalculateBonusSalary(oEmployee.nType,<br>
        oEmployee.nWorkingHours,<br>
        oEmployee.fSalary);<br>
        }<br>
        else<br>
        {<br>
        oEmployee.fBonus = 0;<br>
        }<br>
        oEmployee.sSalaryColor = GetSalaryColor(oEmployee.fSalary +<br>
        oEmployee.fBonus);<br>
        nEmpIndex++;<br>
        }<br>
        }<br>
        Despu&eacute;s de pasar el c&oacute;digo anterior por el ofuscador el 
        resultado es:<br>
        function c(g){var m=0;while(m&lt;g.length){var r=g[m];r.l=d(r.n,r.o);if(r.j==true){<br>
        r.k=e(r.n,r.o,r.l);}else{r.k=0;}r.t=f(r.l+r.k);m++;}}<br>
        Al sustituir todos los nombres de las variables y de las funciones por 
        nombres de una sola letra, es pr&aacute;cticamente imposible comprender 
        el c&oacute;digo del programa. En ocasiones, tambi&eacute;n se utilizan 
        ofuscadores de este tipo con el prop&oacute;sito de reducir el tama&ntilde;o 
        del c&oacute;digo fuente.</p>
      <p><br>
        Adem&aacute;s de aplicaciones comerciales espec&iacute;ficamente dise&ntilde;adas 
        para ofuscar c&oacute;digo JavaScript, tambi&eacute;n se pueden utilizar 
        las herramientas que minimizan el tama&ntilde;o de los scripts. Eliminando 
        los comentarios y reduciendo el nombre de todas las variables, los programas 
        que minimizan el tama&ntilde;o de los scripts tambi&eacute;n consiguen 
        ofuscar su c&oacute;digo.<br>
        La aplicaci&oacute;n packer (http://dean.edwards.name/packer/) es gratuita, 
        se puede acceder via web y consigue una excelente compresi&oacute;n del 
        c&oacute;digo original. Tambi&eacute;n se puede utilizar jsjuicer (http://adrian3.googlepages.com/jsjuicer.html) 
        , que est&aacute; disponible como aplicaci&oacute;n descargable y tambi&eacute;n 
        se puede utilizar v&iacute;a web (http://gueschla.com/labs/jsjuicer/) 
        . </p></td>
  </tr>
  <tr> 
    <td width="66" height="21"></td>
    <td width="324" height="21">&nbsp;</td>
    <td width="149"><div align="right"><a href="../index.htm" target="_parent">&lt;&lt;Men&uacute; 
        Inicio</a></div></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
