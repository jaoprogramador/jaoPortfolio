let gql,yup,User;_35e‍.x([["typeDefs",()=>typeDefs],["resolvers",()=>resolvers],["default",()=>_35e‍.o]]);_35e‍.w("apollo-server",[["gql",["gql"],function(v){gql=v}]]);_35e‍.w("yup",[["*",null,function(v){yup=v}]]);_35e‍.w("../../models/User",[["default",["User"],function(v){User=v}]]);



       const typeDefs = gql`
  extend type Query {
    """
    Returns paginated users.
    """
    users(first: Int, after: String): UserConnection!
  }
`;

const argsSchema = yup.object({
  after: yup.string(),
  first: yup
    .number()
    .min(1)
    .max(30)
    .default(30),
});

       const resolvers = {
  Query: {
    users: async (obj, args) => {
      const { first, after } = await argsSchema.validate(args);

      return User.query().cursorPaginate({
        orderBy: [{ column: 'createdAt', order: 'desc' }, 'id'],
        first,
        after,
      });
    },
  },
};

_35e‍.d({
  typeDefs,
  resolvers,
});
