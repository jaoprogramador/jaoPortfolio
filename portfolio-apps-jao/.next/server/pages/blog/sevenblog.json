{"pageProps":{"post":{"date":"2025-04-09T17:00:00.000Z","slug":"sevenblog","preview":"Hooks in React allow you to manage state and the component lifecycle more efficiently.","title":"What Hooks Do You Usually Use in React to Manage Your Components?","tagline":"Discover the most commonly used hooks in React and how they can improve the management of your components.","image":"/images/blogs/nat-Z0vdRzr_iZM-unsplash.jpg","content":"# What Are Hooks in React?\nHooks are functions that allow you to use state and other React features in functional components without needing to write a class. Introduced in React 16.8, they simplify logic and improve code reuse.\n\n## Why Use Hooks in React?\nEase of use: They allow you to manage state without needing classes.\nCleaner code: They eliminate the complexity of lifecycle methods.\nReusability: They make it easier to extract logic into reusable functions.\nBetter performance: They reduce unnecessary re-renders.\nMain Hooks in React\n## useState\nThe useState hook allows you to manage state inside functional components.\n\n```jsx\nimport { useState } from \"react\";  \n\nfunction Counter() {  \n  const [counter, setCounter] = useState(0);  \n\n  return (  \n    <div>  \n      <p>Counter: {counter}</p>  \n      <button onClick={() => setCounter(counter + 1)}>Increment</button>  \n    </div>  \n  );  \n} \n``` \n## useEffect\nuseEffect handles side effects such as API calls or DOM manipulation.\n\n```jsx\nimport { useState, useEffect } from \"react\";  \n\nfunction UserData() {  \n  const [user, setUser] = useState(null);  \n\n  useEffect(() => {  \n    fetch(\"https://api.example.com/user\")  \n      .then(response => response.json())  \n      .then(data => setUser(data));  \n  }, []);  \n\n  return <div>{user ? <p>Name: {user.name}</p> : <p>Loading...</p>}</div>;  \n}  \n  ```\n## useRef\nuseRef is used to access DOM elements or store persistent values without causing re-renders.\n\n```jsx\nimport { useRef } from \"react\";  \n\nfunction FocusedInput() {  \n  const inputRef = useRef(null);  \n\n  const focus = () => {  \n    inputRef.current.focus();  \n  };  \n\n  return (  \n    <div>  \n      <input ref={inputRef} type=\"text\" />  \n      <button onClick={focus}>Focus Input</button>  \n    </div>  \n  );  \n}  \n```\n## useContext\nuseContext allows you to access values from a context without needing prop drilling.\n\n```jsx\nimport { useContext } from \"react\";  \nconst ThemeContext = React.createContext(\"light\");  \n\nfunction Component() {  \n  const theme = useContext(ThemeContext);  \n  return <p>The current theme is {theme}</p>;  \n}  \n  ```\n## useMemo\nuseMemo memoizes computed values to avoid unnecessary calculations on each render.\n\n```jsx\nimport { useState, useMemo } from \"react\";  \n\nfunction HeavyCalculation({ number }) {  \n  const result = useMemo(() => {  \n    console.log(\"Calculating...\");  \n    return number * 2;  \n  }, [number]);  \n\n  return <p>Result: {result}</p>;  \n}  \n```\n## Conclusion\nHooks in React have revolutionized how we manage state and effects in functional components. Knowing and using the most important ones will help you write cleaner and more efficient code.\n\nEspero que esta traducción te sea útil. ¡Avísame si necesitas más ayuda!\n\n\n\n\n\n\n\n"}},"__N_SSG":true}