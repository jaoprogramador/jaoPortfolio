{"pageProps":{"post":{"date":"2025-04-09T17:00:00.000Z","slug":"fourteen","preview":"OAuth es un estándar de autorización ampliamente utilizado para permitir que las aplicaciones accedan a recursos de usuarios sin compartir sus credenciales. En este post, te explicamos cómo configurar OAuth con Spring Security en una aplicación Java.","title":"OAuth con Spring Security: Autenticación y Autorización en Aplicaciones Java","tagline":"Aprende a integrar OAuth en tus aplicaciones Java usando Spring Security.","image":"/images/blogs/moritz-ludtke-K4n6CW8so84-unsplash.jpg","content":"\r\n# Introducción a OAuth con Spring Security\r\n\r\n**OAuth** es un protocolo de autorización que permite a las aplicaciones acceder a recursos de un usuario en otro servicio (como Google, GitHub o LinkedIn) sin compartir sus credenciales. **Spring Security** es un framework de seguridad para aplicaciones Java que facilita la integración de OAuth en tu aplicación.\r\n\r\n## ¿Por qué usar OAuth con Spring Security?\r\n\r\n1. **Seguridad**: No es necesario almacenar contraseñas de usuarios.\r\n2. **Integración sencilla**: Spring Security proporciona soporte nativo para OAuth 2.0.\r\n3. **Escalabilidad**: Puedes integrar múltiples proveedores de OAuth (Google, GitHub, etc.).\r\n\r\n---\r\n\r\n## **Configuración de OAuth con Spring Security**\r\n\r\nPara configurar OAuth en una aplicación Spring Boot, sigue estos pasos:\r\n\r\n### 1. **Agregar Dependencias**\r\n   - En tu archivo `pom.xml`, agrega las dependencias de Spring Security y OAuth:\r\n     ```xml\r\n     <dependency>\r\n         <groupId>org.springframework.boot</groupId>\r\n         <artifactId>spring-boot-starter-security</artifactId>\r\n     </dependency>\r\n     <dependency>\r\n         <groupId>org.springframework.boot</groupId>\r\n         <artifactId>spring-boot-starter-oauth2-client</artifactId>\r\n     </dependency>\r\n     ```\r\n\r\n### 2. **Configurar el Proveedor de OAuth**\r\n   - En tu archivo `application.yml` o `application.properties`, configura las credenciales de tu proveedor de OAuth (por ejemplo, Google):\r\n     ```yaml\r\n     spring:\r\n       security:\r\n         oauth2:\r\n           client:\r\n             registration:\r\n               google:\r\n                 client-id: TU_CLIENT_ID\r\n                 client-secret: TU_CLIENT_SECRET\r\n                 scope: email,profile\r\n             provider:\r\n               google:\r\n                 authorization-uri: https://accounts.google.com/o/oauth2/auth\r\n                 token-uri: https://oauth2.googleapis.com/token\r\n                 user-info-uri: https://openidconnect.googleapis.com/v1/userinfo\r\n     ```\r\n\r\n### 3. **Configurar Spring Security**\r\n   - Crea una clase de configuración para Spring Security:\r\n     ```java\r\n     import org.springframework.context.annotation.Bean;\r\n     import org.springframework.context.annotation.Configuration;\r\n     import org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\n     import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\n     import org.springframework.security.web.SecurityFilterChain;\r\n\r\n     @Configuration\r\n     @EnableWebSecurity\r\n     public class SecurityConfig {\r\n\r\n         @Bean\r\n         public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n             http\r\n                 .authorizeHttpRequests(auth -> auth\r\n                     .requestMatchers(\"/\", \"/public/**\").permitAll() // Rutas públicas\r\n                     .anyRequest().authenticated() // El resto requiere autenticación\r\n                 )\r\n                 .oauth2Login(oauth2 -> oauth2\r\n                     .defaultSuccessUrl(\"/home\", true) // Redirigir después del login\r\n                 );\r\n             return http.build();\r\n         }\r\n     }\r\n     ```\r\n\r\n---\r\n\r\n## **Ejemplo Práctico: Autenticación con Google**\r\n\r\n### 1. **Crear una Aplicación en Google**\r\n   - Ve a la [Consola de Desarrolladores de Google](https://console.developers.google.com/).\r\n   - Crea un nuevo proyecto y habilita la API de OAuth 2.0.\r\n   - Configura las credenciales de OAuth (Client ID y Client Secret).\r\n   - Agrega una **Redirect URI** (por ejemplo, `http://localhost:8080/login/oauth2/code/google`).\r\n\r\n### 2. **Implementar el Controlador**\r\n   - Crea un controlador para manejar la autenticación y la página de inicio:\r\n     ```java\r\n     import org.springframework.security.core.annotation.AuthenticationPrincipal;\r\n     import org.springframework.security.oauth2.core.user.OAuth2User;\r\n     import org.springframework.stereotype.Controller;\r\n     import org.springframework.ui.Model;\r\n     import org.springframework.web.bind.annotation.GetMapping;\r\n\r\n     @Controller\r\n     public class HomeController {\r\n\r\n         @GetMapping(\"/\")\r\n         public String home() {\r\n             return \"index\"; // Página de inicio pública\r\n         }\r\n\r\n         @GetMapping(\"/home\")\r\n         public String userHome(@AuthenticationPrincipal OAuth2User user, Model model) {\r\n             model.addAttribute(\"name\", user.getAttribute(\"name\"));\r\n             model.addAttribute(\"email\", user.getAttribute(\"email\"));\r\n             return \"home\"; // Página de inicio del usuario autenticado\r\n         }\r\n     }\r\n     ```\r\n\r\n### 3. **Crear las Vistas**\r\n   - Crea una vista `index.html` para la página pública:\r\n     ```html\r\n     <!DOCTYPE html>\r\n     <html>\r\n     <head>\r\n         <title>Inicio</title>\r\n     </head>\r\n     <body>\r\n         <h1>Bienvenido</h1>\r\n         <a href=\"/oauth2/authorization/google\">Iniciar sesión con Google</a>\r\n     </body>\r\n     </html>\r\n     ```\r\n\r\n   - Crea una vista `home.html` para la página del usuario autenticado:\r\n     ```html\r\n     <!DOCTYPE html>\r\n     <html>\r\n     <head>\r\n         <title>Inicio</title>\r\n     </head>\r\n     <body>\r\n         <h1>Bienvenido, <span th:text=\"${name}\"></span></h1>\r\n         <p>Correo electrónico: <span th:text=\"${email}\"></span></p>\r\n         <a href=\"/logout\">Cerrar sesión</a>\r\n     </body>\r\n     </html>\r\n     ```\r\n\r\n---\r\n\r\n## **Conclusión**\r\n\r\nSpring Security facilita la integración de OAuth en aplicaciones Java, permitiéndote autenticar usuarios con proveedores externos como Google, GitHub o LinkedIn. Con este ejemplo, puedes comenzar a implementar OAuth en tu aplicación Spring Boot de manera segura y eficiente.\r\n\r\n---\r\n\r\n### **Referencias**\r\n- [Documentación de Spring Security OAuth](https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html)\r\n- [Guía de OAuth 2.0 con Spring Boot](https://spring.io/guides/tutorials/spring-boot-oauth2/)\r\n\r\n---\r\n\r\n¡Espero que esta plantilla te sea útil para tu publicación sobre OAuth con Spring Security! 😊\r\n\r\n\r\n\r\n\r\n"}},"__N_SSG":true}