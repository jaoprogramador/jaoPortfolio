{"pageProps":{"post":{"date":"2025-08-29T17:00:00.000Z","slug":"metricas","preview":"Descubre c√≥mo implementar un sistema de observabilidad con Prometheus y Grafana en tus microservicios Spring Boot. Aprende qu√© m√©tricas recolectar, c√≥mo configurarlas y construir dashboards y alertas efectivas.","title":"Monitoreo de Microservicios con Prometheus y Grafana","tagline":"De la teor√≠a a la pr√°ctica. Observa tu sistema en tiempo real con m√©tricas claras y visualizaciones potentes","image":"/images/blogs/prometheus-grafana.jpg","content":"# Monitoreo de Microservicios con Prometheus y Grafana üìä\r\n\r\nEn arquitecturas distribuidas, **lo que no se mide no se mejora**.  \r\nPrometheus y Grafana son el **est√°ndar de facto** para **monitoreo de m√©tricas y visualizaci√≥n** en entornos modernos con **Kubernetes** y **Spring Boot**.\r\n\r\nEn este art√≠culo aprender√°s:\r\n\r\n‚úÖ ¬øQu√© son Prometheus y Grafana y para qu√© sirven?  \r\n‚úÖ ¬øPor qu√© las m√©tricas son clave en microservicios?  \r\n‚úÖ C√≥mo integrarlos con Spring Boot  \r\n‚úÖ Ejemplos de m√©tricas y dashboards  \r\n‚úÖ Buenas pr√°cticas y alertas  \r\n\r\n---\r\n\r\n## ‚úÖ ¬øQu√© son Prometheus y Grafana?\r\n\r\n### **Prometheus**\r\n- **Sistema de monitoreo y alertas** open source.\r\n- Recolecta m√©tricas mediante **pull** (scraping HTTP).\r\n- Guarda datos en **serie temporal**.\r\n- Usa **PromQL** para consultas y alertas.\r\n\r\n### **Grafana**\r\n- Herramienta de **visualizaci√≥n y an√°lisis**.\r\n- Crea **dashboards din√°micos** sobre Prometheus (y otras fuentes).\r\n- Soporta **alertas** y notificaciones (Slack, email, PagerDuty).\r\n\r\n---\r\n\r\n## ‚úÖ ¬øPor qu√© necesitas m√©tricas en microservicios?\r\n\r\n- **Detecci√≥n temprana** de fallos (errores, saturaci√≥n).\r\n- **Escalado proactivo** (HPA basado en m√©tricas).\r\n- **SLIs/SLOs/SLAs** claros (latencia, disponibilidad).\r\n- **Optimizaci√≥n** de performance y costos.\r\n\r\n**Tipos comunes de m√©tricas (Golden Signals):**\r\n- **Latencia** (request duration)\r\n- **Tr√°fico** (requests por segundo)\r\n- **Errores** (rate de errores HTTP 4xx/5xx)\r\n- **Saturaci√≥n** (uso de CPU, memoria, hilos)\r\n\r\n---\r\n\r\n## ‚úÖ Integraci√≥n con Spring Boot (Micrometer + Actuator)\r\n\r\nSpring Boot integra **Micrometer**, un facade para sistemas de m√©tricas (Prometheus, Datadog, etc.).\r\n\r\n### Dependencias Maven\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.micrometer</groupId>\r\n    <artifactId>micrometer-registry-prometheus</artifactId>\r\n</dependency>\r\n```\r\n\r\n## Configuraci√≥n en application.yml\r\n```yml\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \"health,metrics,prometheus\"\r\n  endpoint:\r\n    prometheus:\r\n      enabled: true\r\n```\r\n\r\nEsto habilita /actuator/prometheus con m√©tricas listas para Prometheus.\r\n\r\n## ‚úÖ Ejemplo de m√©tricas expuestas\r\n\r\n# HELP http_server_requests_seconds  \r\n# TYPE http_server_requests_seconds_summary\r\nhttp_server_requests_seconds_count{method=\"GET\",uri=\"/api/users\",status=\"200\",} 15.0\r\n# HELP jvm_memory_used_bytes  \r\n# TYPE jvm_memory_used_bytes gauge\r\njvm_memory_used_bytes{area=\"heap\"} 1.234e+07\r\n\r\n\r\nIncluye:\r\n\r\nHTTP (latencia, count por endpoint)\r\n\r\nJVM (memoria, GC, hilos)\r\n\r\nBase de datos (con Hikari)\r\n\r\nCustom (negocio con @Timed o MeterRegistry)\r\n\r\n## ‚úÖ Instalaci√≥n de Prometheus y Grafana (Kubernetes)\r\n### Prometheus (Deployment y ConfigMap b√°sico)\r\n```yml\r\napiVersion: v1\r\nkind: ConfigMap\r\nmetadata:\r\n  name: prometheus-config\r\ndata:\r\n  prometheus.yml: |\r\n    global:\r\n      scrape_interval: 15s\r\n    scrape_configs:\r\n      - job_name: 'spring-apps'\r\n        metrics_path: '/actuator/prometheus'\r\n        kubernetes_sd_configs:\r\n          - role: pod\r\n        relabel_configs:\r\n          - source_labels: [__meta_kubernetes_pod_label_app]\r\n            regex: (.+)\r\n            target_label: app\r\n```\r\n```yml\r\nDeployment:\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: prometheus\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels: { app: prometheus }\r\n  template:\r\n    metadata:\r\n      labels: { app: prometheus }\r\n    spec:\r\n      containers:\r\n        - name: prometheus\r\n          image: prom/prometheus:v2.46.0\r\n          ports: [{ containerPort: 9090 }]\r\n          volumeMounts:\r\n            - name: config\r\n              mountPath: /etc/prometheus\r\n      volumes:\r\n        - name: config\r\n          configMap:\r\n            name: prometheus-config\r\n```\r\n## Grafana\r\n\r\n```yml\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: grafana\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels: { app: grafana }\r\n  template:\r\n    metadata:\r\n      labels: { app: grafana }\r\n    spec:\r\n      containers:\r\n        - name: grafana\r\n          image: grafana/grafana:10.0.0\r\n          ports: [{ containerPort: 3000 }]\r\n```\r\n## ‚úÖ Dashboards recomendados en Grafana\r\n\r\nSpring Boot Statistics (oficial).\r\n\r\nJVM (Micrometer).\r\n\r\nHTTP Server Requests (por endpoint).\r\n\r\nHikariCP (conexiones DB).\r\n\r\nCustom m√©tricas de negocio.\r\n\r\nImporta dashboards desde grafana.com/dashboards\r\n\r\n## ‚úÖ Alertas con Prometheus\r\n\r\nEjemplo de regla (latencia > 500ms por 5 min):\r\n```yml\r\ngroups:\r\n  - name: latency-alerts\r\n    rules:\r\n      - alert: HighRequestLatency\r\n        expr: histogram_quantile(0.95, sum(rate(http_server_requests_seconds_bucket[5m])) by (le))\r\n          > 0.5\r\n        for: 5m\r\n        labels:\r\n          severity: warning\r\n        annotations:\r\n          summary: \"Latencia alta (p95 > 500ms)\"\r\n```\r\n\r\n## Conecta a Alertmanager y env√≠a a Slack/Email.\r\n\r\n‚úÖ Comandos b√°sicos para Prometheus/Grafana\r\n# Prometheus\r\nkubectl port-forward svc/prometheus 9090:9090 -n monitoring\r\n# Grafana\r\nkubectl port-forward svc/grafana 3000:3000 -n monitoring\r\n\r\n\r\nLogin default Grafana: admin/admin.\r\n\r\n## ‚úÖ Buenas pr√°cticas\r\n\r\n‚úî Define m√©tricas personalizadas para eventos cr√≠ticos (MeterRegistry).\r\n‚úî Usa histogramas y percentiles (p95/p99) en vez de promedios.\r\n‚úî Configura scrape_interval adecuado (no abuses del cluster).\r\n‚úî Establece SLIs y SLOs medibles (ej. error_rate < 1%).\r\n‚úî Automatiza dashboards y alertas (Infra as Code, Grafana Provisioning).\r\n\r\n## ‚úÖ ¬øAlgo extra? (si buscas observabilidad completa)\r\n\r\nLogs centralizados: Loki, ELK.\r\n\r\nTrazas distribuidas: OpenTelemetry + Tempo/Jaeger.\r\n\r\nService Mesh: m√©tricas autom√°ticas (Istio/Linkerd).\r\n\r\n## ‚úÖ Conclusi√≥n\r\n\r\nPrometheus + Grafana te dan visibilidad total sobre tus microservicios.\r\nCon estas herramientas podr√°s detectar problemas antes de que los usuarios los sufran, optimizar recursos y cumplir con SLOs.\r\nMonitorear no es opcional, es estrat√©gico. üöÄ"}},"__N_SSG":true}